집합이란 특정조건의 원소들의 모임 간단히 말하면 수의 모임 이라고 이해하면 편하다.

이번에는 그러한 자료의 모임인 집합 자료형을 구현해보자.

먼저 집합 자료형을 만드는 예제부터 보도록 하자.

>>> test = set(1,2,3,4,5)
>>> test
{1, 2, 3, 4, 5}

집합 자료형은 위처럼 set([값1, 값2, 값3, 값4]) 로 리시트를 입력해서 만들 수 있다. 혹은
>>> s2 = set('HAHA')
>>> s2
{'H', 'A'}

문자열을 입력할 수 있다.

그런데 문자열을 HAHA 로 집합 자로형을 만들었는데 왜 결과는 {'H', 'A'} 로 나오는가
그 가장큰 이유는 집합 자료형에서는 두가지 조건이 따라오게된다.

- 중복된 값을 입력할 수 없다.

- 순서가 존재하지 않는다.

순서가 존재하지 않아서 인덱싱과 슬라이싱은 물론 sort 명령어로 정렬을 할 수 없다.

set 으로 작성된 자료형을 리스트로 사용해야 할 때에는 밑과 같은 과정을 수행해야 한다.

>>> set_test = set([1,2,3,4])
>>> list_test = list(set_test)    # set_test 라고 지정된 집합 자료형을 list 로 변환해라!
>>> list_test
[1,2,3,4]

===============================

- 교집합 합칩잡 차집합 구하기

교집합 구하기
>>> set_fir = set([1, 2, 3, 4, 5])
>>> set_sec = set([3, 4, 5, 6, 7])
>>> set_fir & set_sec
{3, 4, 5}

또 다른방법으로는 
>>> set_fir.intersection(set_sec)           # 거꾸로 해도 상관 없다.
{3, 4, 5}


합집합 구하기
>>> set_fir = set([1, 2, 3, 4, 5])
>>> set_sec = set([3, 4, 5, 6, 7])
>>> set_fir | set_sec
{1, 2, 3, 4, 5, 6, 7}

또 다른방법으로는
>>> set_fir.union(set_sec)           # 거꾸로 해도 상관 없다.
{1, 2, 3, 4, 5, 6, 7}


차집합 구하기
>>> set_fir = set([1, 2, 3, 4, 5, 6])
>>> set_sec = set([4, 5, 6, 7, 8, 9])
>>> set_fir - set_sec
{1, 2, 3}

>>> set_sec - set_fir
{8, 9, 7}              # 위에서 말했다싶이 순서가 없기때문에 정렬이 되어있지 않다.

또 다른방법으로는
>>> set_fir.difference(set_sec)
{1, 2, 3}
>>> set_sec.difference(set_fir)
{8, 9, 7}
