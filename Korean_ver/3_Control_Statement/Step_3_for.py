이번에는 반복문 중 하나인 for문에 대해 알아보도록 하자. 이 for문만 잘 사용하면 프로그래밍이 매우 재미있어지리라 장담한다.
다음 예제를 보며 for문을 익혀보도록 하자

>>> for_test = [1, 2, 3, 4]      # for_test 라는 리스트에 1,2,3,4 선언
>>> for a in for_test:           # for_test 리스트를 a 변수에 집어넣어라
...     print(a)                 # a 변수 출력
1
2
3
4

먼저 리스트를 선언한뒤 a라는 이름의 변수에 리스트를 대입한 후 for 문 아래에서 결과값을 출력하는 print 명령을 이용하여 출력하는 예제를 보았다.
무조건 리스트만을 사용해야 하는건 아니며, 위 리스트를 대체하여 튜플 혹은 문자열을 사용할 수 있다.

그런데 만약 1에서 10까지의 수를 출력하고 싶은데 리스트 혹은 튜플에 1,2,3,4,5,6,7,8,9,10 이렇게 하나하나 적기에는 너무 힘이든다.
그래서 range 라는 함수를 사용하는데 예제를 보며 익혀보자.

>>> for a in range(1, 11):
...     print(a)
1
2
3
4
5
6
7
8
9
10

위에서 range 는 인덱싱과 슬라이싱을 했을때를 생각해보도록 하자.
1이상 11미만의 수를 a 변수에 집어넣으라는 의미를 갖고있는 함수이다. 결론적으로는 1 <= x < 11 이 된다.

while 문에서 continue를 사용해보았을 것이다. 여기 for문에서도 continue 를 사용할 수 있다. 다음 예제를 보도록 하자.

>>> grade = [65, 80, 50, 10, 55]       # grade 라는 이름의 리스트에 값들을 선언
>>> num = 0                            # num 이라는 이름의 변수에 값을 선언
>>> for a in grade:                    # a 라는 변수에 grade 리스트를 집어넣음
...     num += 1                       # num = num + 1 과 같은 의미로, 반복문 한번 시행마다 num의 값을 하나 증가시킴
...     if a < 60:                    # 만약 a의 값 즉 grade의 값이 60보다 작으면
...          continue                  # continue 를 사용해서 for문의 가장 처음인 조건식 판별로 넘어감 이때 num의 값은 하나 증가된 상태이다.
...     print("%d OK" % num)           # 위 if문의 조건식이 false 면 출력

continue는 다시말하겠지만 문장을 수행하는 도중 continue를 수행하게되면 다시 for문 처음으로 돌아간다.

자, 이제 for문을 응용하여 구구단 프로그램을 만들어보자.

>>> for a in range(1, 10):          # a 에 1부터 9까지의 값을 입력
...     for b in range(2, 10):      # b 에 2부터 9까지의 값을 입력
...         print(a*b, end = ",")   # a*b를 계산하고 값을 ',' 로 서로 분리
...    print(' ')                   # 결과 출력

2,3,4,5,6,7,8,9, 
4,6,8,10,12,14,16,18, 
6,9,12,15,18,21,24,27, 
8,12,16,20,24,28,32,36, 
10,15,20,25,30,35,40,45, 
12,18,24,30,36,42,48,54, 
14,21,28,35,42,49,56,63, 
16,24,32,40,48,56,64,72, 
18,27,36,45,54,63,72,81, 

for문은 여러분이 어떻게 응용하고 창의적인 사고력을 갖고있는지 테스트하는 함수와 비슷한 수준이다.
다시말해 독자의 창의성이 얼마나 뛰어난지에 따라 for문의 응용이 매우 넓어지게 된다.

다음에는 함수에 대해 알아보도록 하자.
